var search_data = {"index":{"searchIndex":["dodo","dodoexception","moment","serialtimeline","windowdurationexceeded","*()","**()","+()","new()","new()","over()","please()","repeat()","simultaneously()","unused_duration()","use()","readme"],"longSearchIndex":["dodo","dodo::dodoexception","dodo::moment","dodo::serialtimeline","dodo::windowdurationexceeded","dodo::serialtimeline#*()","dodo::serialtimeline#**()","dodo::serialtimeline#+()","dodo::moment::new()","dodo::serialtimeline::new()","dodo::serialtimeline#over()","dodo::serialtimeline#please()","dodo::serialtimeline#repeat()","dodo::serialtimeline#simultaneously()","dodo::serialtimeline#unused_duration()","dodo::serialtimeline#use()",""],"info":[["Dodo","","Dodo.html","",""],["Dodo::DodoException","","Dodo/DodoException.html","",""],["Dodo::Moment","","Dodo/Moment.html","","<p>A Moment represents a single instant in time in which events may occur. Scheduler classes may be used …\n"],["Dodo::SerialTimeline","","Dodo/SerialTimeline.html","","<p>A SerialTimeline is a data structure with a duration (measured in seconds) that contains <code>timelines</code>.  …\n"],["Dodo::WindowDurationExceeded","","Dodo/WindowDurationExceeded.html","",""],["*","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-i-2A","(other)","<p>Repeatedly apply the #+ method of the current SerialTimeline to itself\n<p>other &mdash; Denotes the number of times …\n\n"],["**","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-i-2A-2A","(other)","<p>Scale up a serial by parallelising it according to some factor\n<p>other &mdash; An Integer denoting the degree of …\n\n"],["+","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-i-2B","(other)","<p>Combine two Windows into a single, larger SerialTimeline object.\n<p>other &mdash; Some other SerialTimeline object …\n\n"],["new","Dodo::Moment","Dodo/Moment.html#method-c-new","(&block)","<p>Initialises a new Moment\n<p>block &mdash; A Proc that will be evaluated at some simulated point in time by a Runner …\n\n"],["new","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-c-new","(duration, parent = nil, &block)","<p>Instantiate a new SerialTimeline object\n<p>duration &mdash; The total time period (in seconds) that the SerialTimeline …\n"],["over","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-i-over","(duration, &block)","<p>Define a new SerialTimeline and add it as a child to the current SerialTimeline\n<p>duration &mdash; The duration …\n"],["please","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-i-please","(&block)","<p>Define a new Moment and add it as a child to the current SerialTimeline\n<p>block &mdash; A block passed to the #new …\n\n"],["repeat","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-i-repeat","(times:, over:, &block)","<p>Define a new serial and append it multiple times as a child of the current SerialTimeline object.\n<p>times … &mdash; "],["simultaneously","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-i-simultaneously","(&block)","<p>Define a new ParallelTimeline object append it as a child to the current SerialTimeline. Also permit …\n"],["unused_duration","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-i-unused_duration","()","<p>The the amount of #duration remaining taking into account the duration of any Timeline objects included …\n"],["use","Dodo::SerialTimeline","Dodo/SerialTimeline.html#method-i-use","(*timelines)","<p>Append an existing Timeline as a child of the current SerialTimeline\n<p>timelines &mdash; An array of Timeline objects …\n\n"],["README","","README_md.html","","<p>Dodo\n<p><img src=\"https://travis-ci.org/TomFinill/dodo.svg?branch=master\"> <img src=\"https://api.codeclimate.com/v1/badges/42198ebf17bf127e0da6/maintainability\"> …\n"]]}}